[{"title":"word","url":"/2022/07/07/word/"},{"title":"docker-readme","url":"/2022/07/06/docker-readme/","content":"## 资源\nhttp://www.docker.org.cn\n## 安装\n```\ncurl -fsSL https://get.docker.com \\| bash -s docker --mirror Aliyun\n```\n## 镜像\n列出镜像列表\n```\ndocker images\n```\n查找镜像\n```\ndocker search tomcat\n```\n获取一个新的镜像,若宿主机不存在docker会预先下载这个镜像，docker pull会预先下载这个镜像\n```\ndocker pull tomcat:9.0.64-jre8-openjdk-slim-buster\n```\n创建镜像\n1.通过容器创建\n参数说明：\n-m:提交的描述信息\n-a:指定镜像作者\nsso_center：容器\ntomcat/private: 指定要创建的目标镜像名\n```\ndocker commit -m \"has update\" -a=\"wuhall\" sso_center tomcat/private\n```\n2.使用命令docker build 需要创建一个dockerfile文件\n## 容器\n//创建容器，并进入，其中/bin/bash 为 交互式 shell， -p 宿主机端口:容器端口\n映射端口\n```\ndocker run -itd -p 8081:8081 --name dev_common ubuntu:20.04 /bin/bash\n```\n//查看所有容器\n```\ndocker ps -a\n```\n//进入容器\n```\ndocker exec -it 243c32535da7 /bin/bash\n```\n//导出容器快照到本地\n```\ndocker export 容器id \\>文件名.tar\n```\n//将快照文件导入为本地镜像\n```\ndocker import dev_web.tar dev_web\n```\n//创建容器\n```\ndocker run -itd -p 80:80 -p 8081:8081 -p 3336:3336 -p 8001:22 --name dev_web\n\\--privileged dev_web:latest /usr/sbin/init\n```\n通过 -e LANG=\"C.UTF-8\" 设置 LANG 环境变量值为 C.UTF-8\n\n【注】 这里使用 –-privileged 不然创建的容器无法使用systemctl，生产环境不建议使用\n```\ndocker run -itd -p 8888:8888 --name dev_dlv2 dev_web:latest /bin/bash\n```\n## 问题场景\n### tomcat容器时区与宿主机时区不一致\n拉取镜像\n```\ndocker pull tomcat:9.0.64-jre8-openjdk-slim-buster\n```\n复制宿主机时区文件至docker容器中\n```\ndocker cp /etc/localtime sso_client::/etc/localtime\n```\n修改tomcat中时区\nvi tomcat/bin/catalina.sh\n修改参数 增加时区信息-Duser.timezone=GMT+08\nJAVA_OPTS=\"$JAVA_OPTS -Duser.timezone=GMT+08\"\n### 推送镜像至dockerhub\n创建账号\n[1.创建](https://hub.docker.com/)\n1.登录dockerhub\n```\ndocker login\n```\n2.tag images 其中TARGET_IMAGE须为dockerhub账户名\n```\ndocker tag SOURCE_IMAGE[:TAG] TARGET_IMAGE[:TAG]\ndocker tag tomcat/private:latest wuhall/tomcat:private\n```\n3.推送/拉取镜像\n```\ndocker push wuhall/tomcat:private\ndocker pull wuhall/tomcat:private\n```\n### 删除镜像\n```\ndocker rmi [容器id]\n```\n","tags":["docker"]},{"title":"redis","url":"/2022/05/05/redis/","content":"## 安装\n```\napt update\napt install redis-server\n```\n## 配置文件 设置密码 允许远程连接\n将注释打开 foobared改为密码\n将bind 127.0.0.1 注释\n```\nvi /etc/redis/redis.conf\n#requirepass foobared\n```\n## 启动\n```\nservice redis start\n```\n## redis常用命令\nhttps://www.runoob.com/redis/redis-commands.html\nmore info:[https://blog.csdn.net/snowdream86/article/details/106608928]\n"},{"title":"SQL常用函数以及问题场景","url":"/2022/04/26/SQL常用函数以及问题场景/","content":"## MySQL\n### 常用时间函数\nYYYY-MM-DD HH:mm:ss \n```\nSELECT NOW(),CURRENT_TIMESTAMP(),CURRENT_TIMESTAMP;\n```\nYYYY-MM-DD\n```\nSELECT CURRENT_DATE,CURRENT_DATE(),CURDATE(),DATE(NOW());\n```\nHH:mm:ss\n```\nSELECT CURRENT_TIME,CURRENT_TIME(),CURTIME(),TIME(NOW());\n```\n[more info](https://blog.csdn.net/weixin_38192427/article/details/123365010)\n"},{"title":"系统调优总结","url":"/2022/03/15/系统调优总结/","content":"## Mysql优化\n### 系统优化\nCPU个数8 内存32GiB\n### 软件配置\n```\nvi /etc/mysql/mysql.conf.d/mysqld.cnf\nsql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION\n# 不区分大小写\nlower_case_table_names = 1\n# 缓存、最大连接数设置\ntmp_table_size = 64M\nread_rnd_buffer_size = 8M\nsort_buffer_size = 4M\ninnodb_buffer_pool_size = 20G\nmax_connections = 1000\ninnodb_thread_concurrency=6\n# 禁止反解析\nskip-name-resolve\n# 慢查询开启\nslow_query_log =1\nlong_query_time=1\nslow_query_log_file=/data/mysql/ubuntu-virtual-machine-slow.log\n```\n### 重启\n```\nservice mysql stop\nservice mysql start\n```\n\n## Tomcat优化\nvi ./conf/server.xml\n![](./最大线程数.jpg)\n\n","tags":["MySQL调优、Tomcat调优"]},{"title":"SSO","url":"/2022/03/04/SSO/","content":"## 入门: \n[blog](https://www.jianshu.com/p/75edcc05acfd)\n要点：\n1.同域\n需要解决cookie、session共享问题\n由于cookie不能跨域，需要在设置cookie时设置为顶域\n2.不同域\ncookie、session可不共享\n访问应用资源需经过认证服务器，认证服务器创建ticket，ticket作为携带参数跳转目标服务，目标服务访问认证服务器判断ticket是否有效\n\n## 搭建CAS服务端\n1.[代码下载](https://github.com/apereo/cas-overlay-template/tree/5.3)\n2.[CAS服务搭建](https://so.csdn.net/so/search?q=cas&t=blog&u=makyan)\n3.自定义密码验证规则\n","tags":["单点登录"]},{"title":"frp内网穿透","url":"/2022/02/25/frp内网穿透/","content":"frp下载地址:[](https://github.com/fatedier/frp/releases)\n## frps.ini服务端配置\n```\n[common]\n// 本机ip\nserver_addr = ***\nbind_port = 7000\n```\n## frpc.ini\n```\n[common]\nserver_addr = 192.168.131.17\nserver_port = 7000\n\n[ssh]\ntype = tcp\n// 被转发的ip\nlocal_ip = ***\n// 本地监听的端口 \nlocal_port = 3336\n// 远程服务的实际端口\nremote_port = 3336\n```\n## 启动\n```\n// 服务端启动\n./frps -c ./frps.ini\n// 客户端启动\n./frpc -c ./frpc.ini\n```\n\nmore info:(https://blog.csdn.net/coderSalad/article/details/120200165)","tags":["frp"]},{"title":"在线预览word文档","url":"/2022/02/16/在线预览word文档/","content":"基本思路，浏览器支持预览pdf，只需要将服务器端的word文档转为pdf即可\n## 使用openoffice将word转换成pdf\n### 安装openoffice\n![](./安装包下载.jpg)\n```\ntar -zxvf Apache_OpenOffice_4.1.11_Linux_x86-64_install-deb_zh-CN.tar.gz \ncd ./zh-CN/DEBS\ndpkg -i *.deb\ncd desktop-integration\ndpkg -i *.deb\n```\n### 开启openoffice服务\n```\nnohup  /opt/openoffice4/program/soffice -headless -accept=\"socket,host=0.0.0.0,port=8100;urp;\" -nofirststartwizard > /home/nohup.out &\n```\n【注】出现no suitable windowing system found, exiting.\n```\napt-get install libxt6\napt-get install libxrender1\n```\n### 引入JODConverter （使用java库实现利用openoffice实现格式转换的工作）\n### 使用java io 实现在线预览pdf\njava缓冲流的作用\n读取数据先存到缓冲区中，待到缓存至最大区间时，将缓存中的字节，一次性的写入到磁盘当中。\n（缓存区也是在内存当中。）这样做的优势在于减少了将字节写入磁盘的次数。","tags":["java"]},{"title":"公司svn环境安装","url":"/2022/02/14/公司svn环境安装/","content":"\n## 安装\n```\napt-get install subversion\n```\n## 创建仓库目录\n```\nsudo mkdir /home/svn\nsudo mkdir /home/svn/rep\nchown -R  ubuntu:ubuntu svn/\n```\n## 创建仓库\n```\nsudo svnadmin create /home/svn/rep\n```\n## 配置用户名密码\n```\nvi /home/svn/rep/conf/authz \n```\n![](./user_group.jpg)\n```\nvi /home/svn/rep/conf/passwd\n```\n![](./user_password.jpg)\n## 配置权限\n```\nvi /home/svn/rep/conf/svnserve.conf\n```\n[general]\nanon-access = none\nauth-access = write\npassword-db = passwd\nauthz-db = authz\n## 启动服务\n```\nsvnserve -d -r /home/svn/rep --listen-port 9090\n```\n## 访问\n```\nsvn://ipaddress:9090\n```\n## 文件提交后，文件在服务器上的位置\n文件提交至svn服务器后是以指定格式进行存储的（dbd、fsfs），意味着上传指定文件后，在服务器上是不能找到上传的指定文件。\n du /home/svn/rep/ 可发现提交文件前与提交文件后文件夹大小发生了变化。\nMore info: [blog](https://blog.csdn.net/zsx18273117003/article/details/80398024)","tags":["svn"]},{"title":"esxi设置防火墙","url":"/2022/01/20/esxi设置防火墙/","content":"防火墙命令\n命令\t描述\nesxcli network firewall get\t返回防火墙的启用或禁用状态，并列出默认操作。\nesxcli network firewall set --default-action\t设置为 true 可将默认操作设置为通过。设置为 false 可将默认操作设置为丢弃。\nesxcli network firewall set --enabled\t启用或禁用 ESXi 防火墙。\nesxcli network firewall load\t加载防火墙模块和规则集配置文件。\nesxcli network firewall refresh\t如果已加载防火墙模块，则通过读取规则集文件来刷新防火墙配置。\nesxcli network firewall unload\t破坏过滤器并卸载防火墙模块。\nesxcli network firewall ruleset list\t列出规则集信息。\nesxcli network firewall ruleset set --allowed-all\t设置为 true 可允许所有人对所有 IP 地址具有访问权限。设置为 false 可使用允许的 IP 地址列表。\nesxcli network firewall ruleset set --enabled --ruleset-id=<string>\t将“已启用”设置为 true 可启用指定规则集。将“已启用”设置为 false 可禁用指定规则集。\nesxcli network firewall ruleset allowedip list\t列出指定规则集允许的 IP 地址。\nesxcli network firewall ruleset allowedip add\t允许从指定的 IP 地址或 IP 地址范围访问规则集。\nesxcli network firewall ruleset allowedip remove\t从指定的 IP 地址或 IP 地址范围移除对规则集的访问。\nesxcli network firewall ruleset rule list \t列出防火墙中的每个规则集的规则。\neg.\n```\nesxcli network firewall ruleset set --allowed-all false --ruleset-id=vSphereClient\nesxcli network firewall ruleset allowedip add --ip-address=192.168.21.0/24 --ruleset-id=vSphereClient\n```\nmore info：[esxi](https://docs.vmware.com/cn/VMware-vSphere/6.5/com.vmware.vsphere.security.doc/GUID-7A8BEFC8-BF86-49B5-AE2D-E400AAD81BA3.html)","tags":["ESXI"]},{"title":"Linux常用命令以及问题场景","url":"/2022/01/05/Linux常用命令以及问题场景/","content":"## 命令行\n### tail\n打印文本末尾10行\n```\ntail [file name]\n``` \n追加打印\n```\ntail -f [file name]\n```\n打印文本末尾5000行\n```\ntail -n 5000 [file name]\n```\n### zip\n压缩文件,将 /home/html/ 这个目录下所有文件和文件夹打包为当前目录下的 html.zip,-q不显示执行细节\n```\nzip -q -r html.zip /home/html\n```\n### tar\n压缩文件 压缩为gz\n```\ntar -zcvf userfiles.tar.gz ./userfiles/\n```\n解压 使用tar解压文件 遇到同名的会直接覆盖\n```\ntar -zxvf userfiles.tar.gz\n```\n### nohup\n```\nnohup **.sh(执行脚本) > redirt.out(重定向文件) &\n& 意味退出后仍运行\n```\n## 问题场景\n### 在文件末尾追加内容\n将文件写入到abc.txt,若没有abc.txt则会自动创建\n```\ntail -n 5000 catalina.out > abc.txt\n```\n将文件写入到abc.txt末尾,若没有abc.txt会被自动创建\n```\ntail -n 5000 catalina.out >> abc.txt\n```\n### 查找某个时间范围内的日志\n```\nsed  -n   '/2022-02-27 22:00:00/,/2022-02-27 22:30:59/p'    catalina.out > test_append.txt \n```\n### ufw设置黑名单\n```\n# 插入第一条\nufw insert 1 deny from 192.168.3.99\n# 移除\nufw delete deny from 192.168.3.99\n```\n### ufw 端口 允许网段访问\n```\nufw allow proto tcp from [网段] to any port [端口号]\nufw allow proto tcp from 192.168.131.0/24 to any port 3336\n```\n### ufw 删除规则\n```\nufw status numbered\nufw delete [编号]\n```\n### history日志显示时间\n```\necho 'HISTTIMEFORMAT=\"%F %T \"' >> /etc/profile\nsource /etc/profile\n```\n### 使用ssh进行端口转发\n使用middle_address作为跳转机器\n```\nssh -L local_port:target_address:target_port user_name@middle_address\n```\n### 传输文件\nscp copies files between hosts on a network\n```\nscp [被传输的文件1] [被传输的文件2] [目标服务器用户名]@[目标服务器ip]:[目标服务器目录]\nscp jdk1.8.0_231.tar.gz tomcat-9.0.58.tar.gz root@172.16.58.182:/home\n```\n### 阿里云多台ecs实例共用一个公网ip 访问互联网\nhttps://blog.csdn.net/zxtian1987/article/details/106026030\n在可以访问外网的机器上操作\n```\necho \"net.ipv4.ip_forward = 1\" >> /etc/sysctl.conf && sysctl -p\niptables -t nat -A POSTROUTING -s 172.26.xx.xx/24 -o eth0 -j MASQUERADE\n其中72.26.xx.xx/24为内网机器的ip段\n-o为代理的网卡名\n-j MASQUERADE(动态伪装) 能够自动的寻找外网地址并改为当前正确的外网IP地址\n\n配置阿里云vpc内网路由表\n1）找到使用的路由表，新增一条路由，“下一跳”为ECS那台外网代理机；\n2）把这条路由表绑定到内网主机的交换机。\n#查看nat规则\niptables -L -t nat\n```\n","tags":["Linux"]},{"title":"java设计模式","url":"/2022/01/05/java设计模式/","content":"从经验中总结出的代码设计范例\n## 六大原则\n开闭原则：对扩展开放，对修改关闭。程序在需要进行扩展时，不能去修改原有代码。\n单一职责原则：一个类只做一件事。\n里氏替换原则：任何基类出现的地方，子类一定可以出现。目的是确保基类真正被复用。实现开闭原则的关键是抽象，子类去继承基类就是抽象化的具体实现，里氏替换原则是为了规范化抽象的具体步骤。\n依赖倒转原则：依赖于抽象而不依赖于具体，针对接口编程。是实现开闭原则的基础。\n迪米特原则（知道最少法则）：一个实体应当尽量减少与其他实体之间发生相互作用，使系统功能模块相对独立。\n接口隔离原则：使用多个隔离的接口比使用单个接口要好，降低类之间的耦合度。\n【注】\n合成复用原则：\n尽量使用合成/聚合的方式而不是继承。\n聚合：整体与部分，班级与学生\n合成：拥有关系，强关联，汽车与汽车零件\n## 创建型模式\n### 工厂模式\n将具体对象的创建过程，延迟到子类进行。\n![](./工厂模式.jpg)\n### 抽象工厂模式\n关键还是将具体对象的创建过程，延迟到子类进行，只不过是对工厂模式再进行一层抽象，使之具备实现更复杂类型对象的一种能力。\n![](./抽象工厂模式.jpg)\n### 单例模式\n只能有唯一实例，该唯一实例由自己创造，需将自己创造的唯一实例提供给其他对象。\n区分懒汉与饿汉：是否实现延迟初始化，即需要时才创建实例。\n掌握双重校验锁，synchronized用法，以及静态内部类的实现方式\n![](./单例模式.jpg)\n### 建造者模式\n将多个简单对象组合成一个复杂对象，主要解决复杂对象的创建问题。\n![](./建造者模式.jpg)\n### 原型模式\n创建重复对象，同时保证性能。clone() 深/浅克隆、hashtable。\n![](./原型模式.jpg)\n浅clone：\n被克隆对象需implement cloneable，复写clone(),因为父类Object中clone() 访问权限为 protected，若不复写，只能在java.lang 包中使用，复写clone()  public 主要是为了解决方法权限问题。\n浅clone的 浅 主要是体现在被clone对象中引用的其他对象，并没有被clone，\n```\nStudent s2 = (Student) s1.clone();\ns2.setAge(333);\nSystem.out.println(\"s1 == s2:\" + (s1 == s2));\n// 对象内引用相同，此为浅clone\nSystem.out.println(\"s1.bagg == s2.bagg:\" + (s1.getBagg() == s2.getBagg()));\nBagg b = s1.getBagg();\nb.setSize(3000);\nSystem.out.println(s1.getBagg().getSize());\nSystem.out.println(s2.getBagg().getSize());\n\nprint:\ns1 == s2:false\ns1.bagg == s2.bagg:true\n3000\n3000\n```\n如何实现深clone\n1.使用序列化、反序列化（推荐）注意被克隆的对象以及被克隆对象中所引用的其他对象均需要implement serializable\n2.被clone对象中引用的其他对象也需要implement cloneable,复写clone()，然后在被clone对象中复写clone()的同时调用引用对象的clone()\n```\n@Override\npublic Student clone() throws CloneNotSupportedException {\n    Student s = (Student) super.clone();\n    s.setBagg((Bagg) s.getBagg().clone());\n    return s;\n}\n```\nmore info:[知乎](https://zhuanlan.zhihu.com/p/41880899)\n## 结构型模式\n### 适配器模式\n解决接口不符合当前使用场景的问题。\n![](./适配器模式.jpg)\n### 桥接模式\n形状和颜色，都是图形的两个属性。他们两者的关系是平等的，所以不属于继承关系。更好的的实现方式是：将形状和颜色分离，根据需要对形状和颜色进行组合，这就是桥接模式的思想。\n体现了合成\\复用的思想。\n![](./桥接模式.jpg)\n### 过滤器模式\n使用不同标准过滤一组对象。\n![](./过滤器模式.jpg)\n### 组合模式\n表示整体与部分的关系，将多个不同的对象组合起来，形成一个整体。\n### 装饰器模式\n扩展一个类的功能而不改变其结构。\n![](./装饰器模式.jpg)\n### 外观模式\n隐藏复杂系统内部细节，提供外部接口。\n![](./外观模式.jpg)\n### 享元模式\n在有大量对象时，有可能会造成内存溢出，我们把其中共同的部分抽象出来，如果有相同的业务请求，直接返回在内存中已有的对象，避免重新创建。享元，重点是共享，减少对象创建的数量。\n![](./享元模式.jpg)\n### 代理模式\n增加中间层实现代理，实现对另一个对象的控制。\n![](./代理模式.jpg)\n## 行为模式\n### 责任链模式\n用户只需将请求发送到责任链上即可，无需知道责任链的传递细节。将请求的发送者与请求的处理者解耦。\n![])(./责任链模式.jpg)\n### 命令模式\n将行为的请求者与执行者进行解耦。\n![](./命令模式.png)\n### 解释器模式\n解释一个特定的上下文，常用于sql解析、符号处理引擎。\n![](./解释器模式.png)\n### 迭代器模式\n用于顺序访问集合元素\n![](./迭代器模式.png)\n### 中介者模式\n降低多个对象之间访问的复杂度，设置中介者。\n![](./中介者模式.png)\n### 备忘录模式\n通过一个备忘录对象，记录某个对象的状态。\n![](./备忘录模式.png)\n### 观察者模式\n一个对象改变给其他对象通知，降低对象通知的耦合性。\n![](./观察者模式.png)\n### 状态模式\n一个对象的行为随着对象的状态的改变而改变。\n![](./状态模式.png)\n### 空对象模式\n在对象未做任何行为时，设置默认行为。\n![](./空对象模式.png)\n### 策略模式\n将具体解决方法分别封装，按策略提供具体解决方法。\n![](./策略模式.png)\n### 模板模式\n将通用的方法抽离到父类。\n### 访问者模式\n在被访问者中提供外部访问接口。\n\nMore info: [菜鸟](https://www.runoob.com/design-pattern/design-pattern-intro.html)\nMore info: [知乎](https://zhuanlan.zhihu.com/p/85624457)","tags":["java设计模式"]},{"title":"git使用指南","url":"/2021/12/31/git使用指南/","content":"fork https://www.youtube.com/watch?v=RGOj5yH7evk&t=87s\n## 常用操作\n```\nclone -> 从仓库copy代码至本地\nadd -> 跟踪文件\ncommit -> 保存文件至Git\npush -> 上传文件至仓库\npull -> 拉取改变的文件到本地\n\ngit status -> 查看文件状态 可以看到哪些文件没有被跟踪到 哪些文件修改了\ngit add . -> 跟踪所有文件 获取这些文件的变化信息\ngit commin -m \"message\" -> 提交文件 必须有一条消息\ngit push -> 推送至远程仓库\n\ngit branch -> 分支\ngit reset -> 撤销\ngit log\n```\n注\npush 的先决条件 验证账户 SSH秘钥\n```\nssh-keygen -t rsa -b 4096 -C \"focuson@yeah.net\"\n```\n\n## 问题场景\n### 本地创建项目上传至github\ncreate a new repository on the command line\n```\necho \"# demo\" >> README.md\ngit init\ngit add README.md\ngit commit -m \"first commit\"\ngit branch -M main\ngit remote add origin git@github.com:Wuhall/demo.git\ngit push -u origin main\n```\npush an existing repository from the command line\n```\ngit remote add origin git@github.com:Wuhall/demo.git\ngit branch -M main\ngit push -u origin main\n```\n### 从github拉取项目\n","tags":["git"]},{"title":"数据库连接池","url":"/2021/12/31/数据库连接池/","content":"数据连接被视作一种资源，数据连接池的出现是为了解决管理数据连接的问题\n"},{"title":"log4j1.x漏洞梳理","url":"/2021/12/29/log4j1-x漏洞梳理/","content":"## 摘要\n近期爆发的关于log4j漏洞本质上是RCE（远程命令执行漏洞），涉及log4j的版本为log4j2 2.0-beta7 ~ 2.17.0 (不包括2.3.2 and 2.12.4) \n公司系统引入alibaba druid 1.0.18作为数据连接池组件，而alibaba druid 1.0.18引入 log4j 1.2.17作为日志组件， 本质上log4j 1.2.17的版本与这次RCE漏洞并不相干，但1.2.17本身存在日志事件的序列化漏洞，针对序列化漏洞，我们可以采取禁止log4j 1.2.17中SocketServer类启用端口或启用端口不对外开放的手段规避，若省公司网信安承认我们针对序列化漏洞的规避手段，可避免大动干戈的jar包升级，若不承认，则需更换数据连接池组件。\n【参考log4j官方文档】https://logging.apache.org/log4j/2.x/\n![](./1640772024.jpg)\n \n## log4j 1.2.17 本身存在的问题\nlog4j 1.2.17 已于2015.08.05停止维护，时至今日已被发现的漏洞为日志事件的序列化漏洞\n【log4j官方文档】https://logging.apache.org/log4j/1.2/\n ![](./x2.jpg)\n\n### 日志事件的序列化漏洞整改建议：\n临时手段：\n禁止log4j 1.2.17中SocketServer类启用端口或启用端口不对外开放 \n\n官方建议：\n升级至log4j 2.8.2以上版本\n下载链接：https://logging.apache.org/log4j/2.x/download.html\n\n## jar包升级的潜在问题\nAlibaba druid最新jar包版本1.2.8中依旧依赖log4j 1.2.17的库，若强制升级log4j版本，只能放弃druid更换数据库连接池组件。\n![](./x.png)\n\n## java序列化与I/O\njava序列化本质上是为了解决对象本地保存与网络传输的问题，具体做法是将对象的内容流化，转储为字节序列，待需要使用对象时，将字节序列转为对象。\n引入serialVersionUID是为了确认发送方与接收方版本一致，提高兼容性\njava序列化机制完善了java IO\n\n\n","tags":["log4j1.x"]},{"title":"动手学深度学习","url":"/2021/12/28/动手学深度学习/","content":"李沐动手学深度学习: [link](http://zh-v2.d2l.ai/chapter_installation/index.html)\n# 安装\n```\napt install build-essential\napt install python3.8\n```\n## 安装miniconda\n```\nwget https://repo.anaconda.com/miniconda/Miniconda3-py38_4.10.3-Linux-x86_64.sh\nsh Miniconda3-py38_4.10.3-Linux-x86_64.sh \n【注】 Miniconda 中只含 python 与 conda\nconda为包管理系统，管理环境\n```\n## \n```\npip install jupyter d2l torch torchvision\n国内使用 \npip install torch torchvision -i https://pypi.tuna.tsinghua.edu.cn/simple\n```\n【注】 \npip 为python包管理工具\njupyter 为记事本工具\n\n## 使用jupyter\n```\n jupyter notebook --ip=0.0.0.0 --no-browser --allow-root\n【注】 --ip=0.0.0.0 表示任意端口可以访问 --no-browser 表示不开启浏览器\n```\n\n# 前言\n## 关键组件\n\n我们可以学习的数据（data;\n\n如何转换数据的模型（model）；\n\n一个目标函数（objective function），用来量化模型的有效性；\n\n调整模型参数以优化目标函数的算法（algorithm）。","tags":["deep learning"]},{"title":"cet6_writing","url":"/2021/12/17/cet6-writing/","content":"\n## communication\n&nbsp;&nbsp;In today's society,it is impossible to overstate the importance of cultivating communication skills.And it's especially vital for students,the future of country,to develop effective skills to communicate with others.\n&nbsp;&nbsp;First of all,a person with effective communication skills finds it's easier to put forth his ideas clearly,which helps to develop better interpersonal relationship with people around him.Moreover,a good communicator is often a good mediator and negotiator who is skilled in resolving disputes and enhancing cooperation.Outstanding communication skills enable him to work more effectively in groups.Besides,effective communication skills are essential to developing other key life skills like problem solving and decision making,which are essential in both our personal and professional lives.\n&nbsp;&nbsp;There is a good saying that what communication does for an organization resembles what bloodstream does for an organism.Therefore,whether you're an effective communicator or not,it's essential to realize the importance of good communication and try to imporve your communication skills.\n\n## chart\n* the above chart explicitly illustrates the amount of xx from (xx) to (xx years)\n* as is evidently reflected by the figure in chart\n* has been on the increase/drops + steeply/steadily from xx to xx\n* from the considerable/moderate decline/rise in chart\n\n## letter\nDear Tom,\n&nbsp;&nbsp;On hearing that you are planning to teach English in China and inquire which city to work.I'd like to recommand our capital city Beijing an international metropolis to you.\n'''\nYours sincerely\nxx"},{"title":"计算机网络","url":"/2021/12/13/计算机网络/","content":"## 127.0.0.0 与 0.0.0.0的区别\n127.0.0.1 是一个环回地址。并不表示“本机”。0.0.0.0才是真正表示“本网络中的本机”。\n在实际应用中，一般我们在服务端绑定端口的时候可以选择绑定到0.0.0.0，这样我的服务访问方就可以通过我的多个ip地址访问我的服务。\n## 网关的作用\nLAN中划分不同子网 不同子网之间是不能直接通信的 需要将目标mac改为网关mac再发出\n根据ip判断如何发送的过程叫做路由\n路由器的WAN口接入互联网（公网） LAN口接入家庭设备\n从内网访问互联的过程中 路由器担任网关的角色 从内网访问互联的整个过程叫做路由\n交换机的作用是根据mac地址 将数据包发送到目标位置 路由器去掉WAN其实也相当于交换机\n"},{"title":"公司ai环境安装","url":"/2021/12/10/公司ai环境安装/","content":"\n### 安装miniconda\n```\nwget https://repo.anaconda.com/miniconda/Miniconda3-py38_4.10.3-Linux-x86_64.sh\nsh Miniconda3-py38_4.10.3-Linux-x86_64.sh \n```\n### 接下来，初始化终端Shell，以便我们可以直接运行conda。\n~/miniconda3/bin/conda init\n### 现在关闭并重新打开当前的 shell。你应该能用下面的命令创建一个新的环境：\n```\nconda create --name utone python=3.8 -y\n```\n### 安装包指定源\n```\npip install --user torch torchvision tqdm seaborn matplotlib pandas numpy flask pillow opencv-python -i http://mirrors.aliyun.com/pypi/simple --trusted-host mirrors.aliyun.com\n```\n### jupyter指定ip端口运行\n```\n jupyter notebook --no-browser --port 8888 --ip=0.0.0.0\n```\n"},{"title":"问题总结2021","url":"/2021/12/05/问题总结2021/","content":"## 监听程序当前无法识别连接描述符中所给出的SID\n> ORA-12505, TNS:listener does not currently know of SID given in connect descriptor   //说明给到的sid有误,很有可就是服务名和sid混淆使用。\n![](./0001.png)\n首先了解数据库url的写法有两种\n```\n//监听sid服务，表示sid为orcl\ndatabase.url=jdbc:oracle:thin:@171.xxx.96.xx:xxxx:orcl\n//监听服务名，表示服务名为orcl\ndatabase.url=jdbc:oracle:thin:@171.xxx.96.xx:xxxx/orcl\n```\n第一种是监听sid服务，第二种则是监听服务名\n所以发现是自己的sid写错导致出现这个错误，把服务名当做了sid\n把orcl的 “ : ” 改为 “ / ”  访问正常\n\n## 清除表内数据 （truncate table）时，存在外键约束 无法操作数据\nSET FOREIGN_KEY_CHECKS=0; #禁用外键 \nTRUNCATE TABLE tableName;  #清空表 \nSET FOREIGN_KEY_CHECKS=1; #启用外键\n\n## sql 总结\n-- 这段sql 使用exists ,exists的条件类似bool ，能返回结果集则true，不能返回结果集则返回false\nexists 与 in 最大的区别在于  in一定是外层条件比in 条件覆盖范围大\nSELECT\n a.user_id,\n a.longitude,\n a.latitude,\n a.create_date,\n su.NAME,\n su.login_name \nFROM\n zhjl_user_track a\n LEFT JOIN sys_user su ON su.id = a.user_id \nWHERE\n NOT EXISTS (\n SELECT\n  1 \n FROM\n  zhjl_user_track b \n WHERE\n a.user_id = b.user_id \n AND b.create_date > a.create_date)\n\n- 以下这段SQL使用 inner join \\ 分组、聚合函数\ninner join 本质上就是两个表的交集、分组使用聚合函数用以取出最大时间的人\nSELECT a.user_id AS userId, a.longitude, a.latitude, a.create_date AS createDate, su.name, su.login_name FROM zhjl_user_track a\n INNER JOIN \n (SELECT a.user_id AS userId, a.`create_date` FROM zhjl_user_track a GROUP BY a.user_id HAVING a.`create_date`=MAX(a.`create_date`)) t\n   ON a.user_id=t.userId AND a.create_date=t.create_date\n INNER JOIN sys_user su ON su.id = a.user_id\n WHERE a.create_date>='2021-02-01 0:00:00'\n LIMIT 100\n\n插入更新删除\ninsert into table_name values(full_field);\ninsert into table_name (field1,field2...) values (field1,field2); --按位置\ninsert into table_name (field1,field2...) select field1,field2 from temp; --按位置\nupdate table_name set key = value, key2 = values where ...;\ndelete from table_name where...;\n\n\n## 使用$.post（jquery 的 post 方法）入库一个字段后，紧接的查询 却没能查到这条记录\n```\n$.post() 和 $.get() 默认是 异步请求\n$.ajaxSettings.async = false;//可在$.post 之前将ajax 设置为同步\n$.ajaxSettings.async = true;//默认为true 、异步请求\n```\n异步\n当一个异步请求发送时，浏览器不会处于锁死、等待的状态，一个异步请求从发送到获取响应的期间，浏览器还可以执行其他操作，这就是异步请求。\n\n## 使用补码的目的\n使用补码的目的是省去计算中判断符号的麻烦，不论正数还是负数都统一做加法计算；\n最高位为0是正数、最高位为1是负数\n原码：10000001 （-1）    00000011 （3）\n正数的补码为其本身；负数的补码：符号位不变、其他位取反、而后加1\n补码：11111111                   00000011\n结果：00000010  （2）\n\n## int(1) 与int (11) 的区别 --mysql中int 长度\n理论上int 长度是为 4个byte 范围在 -2^31~2^31-1\nint 字符长度不管是设置为1 还是11 都是 4个byte ，最大值为20多亿，宽度只是在设置zerofill 后在长度不及时填充零\n当整数类型int 不够存 应设置为bigint 而不应该去继续扩大int的长度\n这次遇到的exception为 out of range for value column 'office_id'\n\n## linux文件属主与属组\n![](./0002.png)\n从左至右第一个字符代表文件类型\n• 当为[ d ]则是目录\n• 当为[ - ]则是文件；\n• 若是[ l ]则表示为链接文档(link file)；\n• 若是[ b ]则表示为装置文件里面的可供储存的接口设备(可随机存取装置)；\n• 若是[ c ]则表示为装置文件里面的串行端口设备，例如键盘、鼠标(一次性读取装置)。\n![](./1699970-20190616125146973-273227113.png)\n\nchown [–R] 属主名 文件名\nchown [-R] 属主名：属组名 文件名\n\n##  创建用户\nuseradd -m changfeng -d /home/changfeng -s /bin/bash","tags":["jdbc mysql jquery 补码"]},{"title":"word转md","url":"/2021/12/05/word转md/","content":"## 安装 pandoc writage\n[pandoc 下载地址](https://hexo.io/docs/writing.html)\n```\npandoc demo.doc -o demo2.md\npandoc demo.doc -o demo2.html\n```\n只使用pandoc 无法解决word中图片问题\n[writage 下载地址](http://www.writage.com/)\n\n重新打开word文档，另存为md\n[more info](https://www.cnblogs.com/successok/p/12123967.html)\n","tags":["markdown"]},{"title":"linux-readme","url":"/2021/12/05/linux-readme/","content":"## VirtualBox(free)+CentOS\n\n### download\n\n| <https://www.virtualbox.org/wiki/Downloads> ![](./e9a71152ee4a38ffd96f60af984d6587.png) |\n|---------------------------------------------------------------------------------------------|\n\n| <https://mirrors.aliyun.com/centos/?spm=a2c6h.13651104.0.0.613012b2TDFhqN> ![](./eafa8331721485a75b590881bedfca83.png)  ![](./35cf2daf98345669b53f8fe4814d7b1e.png) |\n|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n\n### setup\n\n安装完成后重启又进入安装界面\n\n![](./498959f84efb67c4209f9396dd351a85.png)\n\n### account\n\naccount:root\n\naccount:123\n\nacctount:tiger\n\npassword:tiger\n\n### 4. CentOS8 Linux操作系统中安装GNOME3桌面环境和GDM(GNOME Display Manager)现实环境管理器。\n\n[root@localhost \\~]\\# yum groupinstall \"Server with GUI\"\n\n![CentOS8安装GNOME3桌面并设置开机启动图形界面CentOS8安装GNOME3桌面并设置开机启动图形界面](./43236ed1138cafb8fa67e45375a2ae2a.png)\n\n设置GDM开机启动\n\n查看gdm.service是否启动，发现gdm服务没有启动。\n\n[root@localhost \\~]\\# systemctl status gdm\n\n● gdm.service - GNOME Display Manager\n\nLoaded: loaded (/usr/lib/systemd/system/gdm.service; enabled; vendor preset:\nenabled)\n\nActive: inactive (dead)\n\n下面设置gdm开机启动，并立即启动该服务：\n\n[root@localhost \\~]\\# systemctl enable gdm --now\n\n![CentOS8安装GNOME3桌面并设置开机启动图形界面CentOS8安装GNOME3桌面并设置开机启动图形界面](./b971607490cd5cbf5958654783b4916c.png)\n\n**设置系统启动级别为graphical**\n\n默认情况，CentOS8默认启动级别为multi-user.target。\n\n[root@localhost \\~]\\# systemctl get-default\n\nmulti-user.target\n\n![CentOS8安装GNOME3桌面并设置开机启动图形界面CentOS8安装GNOME3桌面并设置开机启动图形界面](./43627bc44369b156a131811f247b09e0.png)\n\n下面设置CentOS8的启动级别为graphical.target\n\n[root@localhost \\~]\\# systemctl set-default graphical.target\n\nRemoved /etc/systemd/system/default.target.\n\nCreated symlink /etc/systemd/system/default.target ¡ú\n/usr/lib/systemd/system/graphical.target.\n\n[root@localhost \\~]\\# systemctl get-default\n\ngraphical.target\n\n![CentOS8安装GNOME3桌面并设置开机启动图形界面CentOS8安装GNOME3桌面并设置开机启动图形界面](./a2eceb27b21218898d0340ce966e2ead.png)\n\n<http://linux.vbird.org/>\n\n## VMware station 16 pro+CentOS\n\n### VMware官方网站\n\n[https://www.vmware.com](https://www.vmware.com/)\n\n### VMware Workstation Pro 16 发行说明\n\n<https://docs.vmware.com/en/VMware-Workstation-Pro/16/rn/VMware-Workstation-16-Pro-Release-Notes.html>\n\n### VMware Workstation Pro 16 官方下载下载地址\n\n复制下面链接打开迅雷即可下载：\n<https://download3.vmware.com/software/wkst/file/VMware-workstation-full-16.0.0-16894299.exe>\n\n### VMware Workstation Pro 15.5.6 官方下载下载地址\n\n复制下面链接打开迅雷即可下载：\n<https://download3.vmware.com/software/wkst/file/VMware-workstation-full-15.5.6-16341506.exe>\n\n### VMware Workstation Pro 16 激活密钥\n\nZF3R0-FHED2-M80TY-8QYGC-NPKYF\n\nYF390-0HF8P-M81RQ-2DXQE-M2UT6\n\nZF71R-DMX85-08DQY-8YMNC-PPHV8\n\n### VMware Workstation Pro 15 激活密钥\n\nVF5WH-00ZDH-489KP-0QNXG-WZKRA\n\nAA310-6UX0J-H8D1Z-C4ZXZ-MPAD0\n\n1.  [VMware官方网站](https://www.ssymon.com/archives/vmware-download-key#yFMXkctZ)\n\n2.  [VMware Workstation Pro 16\n    发行说明](https://www.ssymon.com/archives/vmware-download-key#deCHBBFX)\n\n3.  [VMware Workstation Pro 16\n    官方下载下载地址](https://www.ssymon.com/archives/vmware-download-key#CyYcwBPP)\n\n4.  [VMware Workstation Pro 15.5.6\n    官方下载下载地址](https://www.ssymon.com/archives/vmware-download-key#fzrJdSiW)\n\n5.  [VMware Workstation Pro 16\n    激活密钥](https://www.ssymon.com/archives/vmware-download-key#mmWNkwCG)\n\n6.  [VMware Workstation Pro 15\n    激活密钥](https://www.ssymon.com/archives/vmware-download-key#fysynZTs)\n\n**Copyright:** 采用\n[知识共享署名4.0](https://creativecommons.org/licenses/by/4.0/)\n国际许可协议进行许可\n\n**Links:** <https://www.ssymon.com/archives/vmware-download-key>\n\n## 安装CentOS8.2\n\n1.  1.分区\n\n2.  i.主分区+扩展分区数\\<=4\n\n3.  逻辑分区：5、6\n\n4.  ii.分区规划：\n\n5.  / 50G\n\n6.  /boot 1G\n\n7.  /data 30G\n\n8.  /swap 交换分区 2G\n\n![](./f90e71e2a417d6d5a1d33264905306e9.png)\n\n![](./907b2676d0343f03836e63417c81e0ef.png)\n\n![](./9c37757ea4e943619aa6cef0e182b14d.png)\n\n### 虚拟机设置\n\n这里启动时连接一定要勾选上\n\n![](./c5ce9e4a7da667834fd7ef74d9ec7235.png)\n\n![](./78eca9c903d7c6b1b9c93ce47d6e968a.png)\n\n### 安装—开启此虚拟机\n\n### 账户\n\nroot --root\n\ntiger --tiger\n\n## 2.安装CentOS7.9\n\n![](./a9e039a7cbfa52bcd166e9e5c1e5d0e5.png)\n\n![](./0260154ca07fff94f28becade71cbf6e.png)\n\nInstallation destination\n\n![](./09627c58cc8fc1ff941140a2182a4028.png)\n\n分区\n\n![](./9dae1504d017ce19cd42cd5b103cfc62.png)\n\n![](./515b543d3469644fc05d0f18ebe94d95.png)\n\n![](./1c6130b33a8821737f63824bbe2ba3c0.png)\n\n![](./763332479f8159ea2e68153c70fce488.png)\n\n### 账户\n\nRoot --root\n\nTiger --tiger\n\n## 备份\n\n1.  关闭虚拟机\n\n2.  关闭虚拟机界面\n\n3.  拷贝目录\n\n![](./568afe5c662ea47010bc564a734ea0d0.png)\n\n## 安装Ubuntu16.4\n\n账户：wuhall 123456\n\nRoot 123456\n\n## 安装Ubuntuoff16.4\n\n拷贝Ubuntu16.4文件\n\n账户：wuhall 123456\n\n## 要点\n\n### 1.图形界面不属于linux的一部分，它只是一个软件\n\n图形界面耗内存\n\n### 2. linux空格、大小写、单引号（一般识别成语句）、反向单引号/双引号（可以识别成命令）敏感\n\n写命令行不要随意空格\n\n### 3.设置--在内存中可生效，在文件中可保存\n\n## 快捷键\n\nCtrl+alt+enter--全屏切换\n\nEsc--显示详细信息\n\nCtrl+alt+f2\\~f6……--切换命令行界面\n\n（linux具备多用户共用终端的特点，考虑并发，着眼于服务器端）\n\nCtrl+alt+f1—切换图形界面\n\nshift+pageup--向上翻页\n\nctrl+d—exit\n\nctrl+l--clear（清屏）\n\nctrl+c 命令终止\n\nbash 快捷键\n\nctrl+i 清屏（clear）\n\nctrl+o 执行当前命令，并重新显示本命令\n\nctrl+s 阻止屏幕输出，锁定\n\nctrl+q 允许屏幕输出\n\nctrl+c 终止命令\n\nctrl+z 挂起命令\n\n![](./601f2e0189aa582a234a5c73ba42bd5a.png)\n\n日期和时间\n\ndate 查看/修改操作系统时间\n\ndate MMDDHHmmYYYY.ss\n\ndate [moth][date][hours][min][years].[second] 格式date 121816212020.35\n\ndate 032310402021.50\n\nclock 查看/修改主板时间\n\nclock -w 以系统时间为准\n\nclock -s 以软件时间为准\n\n时区\n\nVim 全选 全部删除 全部复制\n\n**全选（高亮显示**）：按esc后，然后ggvG或者ggVG\n\n**全部复制：**按esc后，然后ggyG\n\n**全部删除：**按esc后，然后dG\n\n## 命令行\n\nhostnamectl 提供关于本机的基本信息\n\n![](./7d9aee03729b9b3d7eb4d9d8347e4b88.png)\n\nrz -be 传输大文件时用\n\nlsb_release -a 查看ubuntu版本\n\nifconfig--查询ip\n\nfree -h--查询内存占用\n\nstartx--切换图形界面（不需要登录，默认只是开启一个软件）\n\nxclock--钟表工具（只能在图形界面上使用）\n\ninit 0-关机\n\ninit 3--切换命令行界面\n\ninit 5--切换图形界面\n\ninit 6 or reboot--重启\n\npoweroff--关机并断电\n\nhalt--关机（版本有区别）\n\nrunlevel--查询运行模式\n\nwhoami--查询当前登录人\n\ntty--终端窗口，在命令行界面查询当前功能键f\\*\n\nchvt 2\\~6--终端窗口，在图形界面切换命令行界面\n\ncat /etc/centos-release--查看操作系统版本\n\nuname -r--查看操作系统内核\n\nlscpu--查看当前cpu型号\n\nfree -h--查看内存\n\ncat /proc/meminfo--查看内存\n\nlsblk--查看硬盘配置\n\nmii-tool ens33--查看网卡\n\nwho am i--查看当前用户以及登录在哪个终端\n\nwho--查看当前有哪些用户登录\n\ncat /etc/shells--查询系统中所有shell程序\n\necho \\$SHELL--查询当前使用的shell\n\n/bin/[shell名称]--切换不同shell\n\nhostname--查看主机名\n\necho \\$PS1--显示提示符格式(严格区分大小写)\n\nPS1=\"\\\\[\\\\e[1;35m\\\\][\\\\u@\\\\h \\\\W]\\\\\\\\\\$\\\\[\\\\e[0m\\\\]\"--修改显示行格式命令\n\n![](./6d425c6a180e089660d9a21820a62924.png)\n\nnano /etc/gdm/custom.conf—设置开机自动登录\n\n\\--write\n\n[daemon]\n\nAutomaticLoginEnable = true\n\nAutomaticLogin = root\n\n\\--show\n\ncat /etc/gdm/custom.conf\n\nnano /etc/motd--登录提醒\n\ndf--光盘路径\n\nbuiltin（内部命令）--依赖于shell，优先级高\n\n外部命令--表现为磁盘文件\n\ntype [命令名]--查看是内部命令还是外部命令\n\nnmcli con modify ens33 connection.autoconnect yes –设置网卡自动连接（CentOS 7）\n\nalias [别名]='命令行'—使用别名\n\nalias cdnet='cd /etc/sysconfig/network-scripts/'—使用别名的例子\n\n（如此操作退出重登后就不生效了，因为没有写入文件 exit）\n\nls--命令用于显示指定工作目录下之内容\n\nls -a --显示所有文件及目录 (**.** 开头的隐藏文件也会列出)\n\n.bashrc 存放用户指定别名的文件\n\nnano .bashrc 打开存放用户指定别名的文件\n\n写入alias cdnet='cd /etc/sysconfig/network-scripts/'\n\\--如此可使该别名写入文件当中\n\n（ctrl+x y确认 enter）\n\nsource [文件] --将该文件读入内存，让配置文件生效\n\n. [文件] -- 将该文件读入内存，让配置文件生效\n\ncd --返回根目录\n\nalias -- 查看所有别名   \nunalias [别名名称] -- 删除别名（只是在内存中删除掉）\n\nwhereis [命令名称] -- 查看[命令名称]路径\n\n命令格式\n\ncommand [options] [arguments]\n\nid -u -tiger --格式 命令【短格式选项】【参数】\n\nls --all 格式 命令 【长格式选项】\n\nls -l -a 列出文件详细信息\n\nll /etc/localtime 列出当前时区\n\n![](./4e3b00b5a458073986e07c1320f5d8a7.png)\n\nvim – 编辑器\n\necho [变量名] 回显变量\n\necho \\$SHELL 回显SHELL变量路径\n\nhistory 查看已执行命令的记录\n\n（当前执行的操作命令是放在内存当中，正常情况下退出之前linux会自动将内存中的执行历史存入硬盘当中）\n\n![](./db838fffbcea25ac6e22bd168747c3fb.png)\n\n![](./22e286c30a3fbcc1498a411c40e3e0f6.png)\n\n![](./98178f4c01435d9bd5dbd21ddb240aab.png)\n\nHISTTIMEFORMAT=”%F %T” 显示历史记录时间\n\n![](./4ead1ce22ff4a99716d957cd01536ea5.png)\n\npwd printing working directory打印当前目录\n\n![](./ae4e21f6609a9454b687bdeca04bb8ed.png)\n\ncd change directory 更改工作目录\n\n![](./dadeb5547a02299e480c13a9ad83abf9.png)\n\nLinux上传下载均是基于Linux服务器而言的\n\nrz 上传（received）\n\nsz [文件名] 下载（send）\n\n在secureCRT中可更改下载路径\n\n![](./e0919cf30b46bef728e63b8f81ef6bab.png)\n\n![](./5cd60b854591f542efe2a46f195b769b.png)\n\nLinux中删除文件是remove\n\nrm [文件名] 删除文件\n\nrm -rf [目录名字] 删除文件夹\n\nmkdir [文件夹名] 创建文件夹\n\nsudo 命令\n\nxzm@ubuntu:\\~\\$ sudo\n\n这样输入当前管理员用户密码就可以得到超级用户的权限。但默认的情况下5分钟root权限就失效了。\n\nsudo -i\n\nxzm@ubuntu:\\~\\$ sudo -i\n\n通过这种方法输入当前管理员用户的密码就可以进到root用户。\n\ntar -zxvf 要解压的文件名 -C 要解压到哪个路径下\n\ntar在Linux上是常用的打包、压缩、加压缩工具，他的参数很多，折里仅仅列举常用的压缩与解压缩参数\n\n参数：  \n\\-c ：create 建立压缩档案的参数；  \n\\-x ： 解压缩压缩档案的参数；  \n\\-z ： 是否需要用gzip压缩；  \n\\-v： 压缩的过程中显示档案；  \n\\-f： 置顶文档名，在f后面立即接文件名，不能再加参数\n\nsudo命令以系统管理者的身份执行指令\n\nsudo -i 输入当前管理员用户的密码就可以进到root用户\n\n移动文件\n\nmv 【选项】 源文件 目标文件\n\n选项：\n\n-   \\-f：强制覆盖，如果目标文件已经存在，则不询问，直接强制覆盖；\n\n-   \\-i：交互移动，如果目标文件已经存在，则询问用户是否覆盖（默认选项）；\n\n-   \\-n：如果目标文件已经存在，则不会覆盖移动，而且不询问用户；\n\n-   \\-v：显示文件或目录的移动过程；\n\n-   \\-u：若目标文件已经存在，但两者相比，源文件更新，则会对目标文件进行升级；\n\niptables [-t table] COMMAND chain CRETIRIA -j ACTION\n\n-   \\-t table ：3个filter nat mangle\n\n-   COMMAND：定义如何对规则进行管理\n\n-   chain：指定你接下来的规则到底是在哪个链上操作的，当定义策略的时候，是可以省略的\n\n-   CRETIRIA:指定匹配标准\n\n-   \\-j ACTION :指定如何进行处理\n\n| -L | 查看规则链 | iptables -L |\n|----|------------|-------------|\n\niptables -L -n -v 查看规则链详细信息\n\nhelp\n\n使用方法\n\n命令 --help作用于外部命令；\n\nls --help\n\n1\n\nhelp 命令 作用于内部命令；\n\nhelp cd\n\n1\n\n是否内外部命令可以通过type 命令的方式查看；\n\ntype cd\n\n## 特殊符号\n\nhttps://www.cnblogs.com/lidabo/p/4323979.html\n\n\\| 管道 (pipeline)\n\n是 UNIX 系统，基础且重要的观念。连结上个指令的标准输出，做为下个指令的标准输入。\n\nlsof -i:80\\|grep nginx\\|awk '{print \\$2}'\\|xargs kill -9\n\n## 问题场景\n\n### 1.在root账号下写入别名cdnet， ctrl+alt+f2(切换命令行界面，更换tiger账号登录) 使用别名cdnet，不生效。\n\n每个账号都有自己独自的home文件夹；\n\n解决方案 写入到/etc/bashrc\n\n命令行操作 nano /etc/bashrc\n\n### 2.命令嵌套执行\n\n可以使用\\` \\`（反向单引号） or \\$( ) 进行包裹\n\n![](./81499ef771081412d8bcab768ddec651.png)\n\n### 3.设置网卡自动连接\n\n![](./e90d0f77a3767ff3b92670b9c9b9a7db.png)\n\n使用**nmcli c reload**命令重启网络服务\n\n### 4.secureCRT连接Ubuntu16被拒\n\nThe remote system refused the connection.\n\n【解决】\n\nsudo -i 进入root账户\n\nsudo apt-get update\n\napt-get install openssh-server\n\n### Navicat连接mysql（centos7）失败\n\n#### 使用telnet工具检测对centos7 3306端口是否能ping通\n\ntelnet 192.168.21.58 3306\n\n![](./a3970de789a84dbf3f2e7d84bbebc3e4.png)\n\n#### 2.安装 iptables-services\n\nyum -y install iptables-services\n\n#### 3.开启3306端口\n\nvim /etc/sysconfig/iptables\n\n![](./d45bab8ef9403baff820a0d1133d9175.png)\n\n\\# a sample configuration for iptables service\n\n\\# you can edit this manually or use system-config- firewall\n\n\\# please do not ask us to add additional ports/services to this default config\n\n\\*filter\n\n:INPUT ACCEPT [0:0]\n\n:FORWARD ACCEPT [0:0]\n\n:OUTPUT ACCEPT [0:0]\n\n\\-A INPUT -m state --state RELATED, ESTABLISHED -j ACCEPT\n\n\\-A INPUT -p icmp -j ACCEPT\n\n\\-A INPUT -i lo -j ACCEPT\n\n\\-A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT\n\n\\-A INPUT -p tcp -m state --state NEW -m tcp --dport 3306 -j ACCEPT\n\n\\-A INPUT -j REJECT --reject-with icmp-host-prohibited\n\n\\-A FORMARD -j REJECT --reject-with icmp-host-prohibited\n\nCOMMIT\n\n#### 4.重启防火墙失败\n\nservice iptables restart\n\n启动防火墙失败\n\n![](./5f57de29c86b304ab1f7574d3ceed8fa.png)\n\n#### 5.关闭firewalld\n\nsystemctl stop firewalld\n\nsystemctl mask firewalld\n\n使用iptables服务:\n\n\\#开放3306端口\n\niptables -A INPUT -p tcp --dport 3306 -j ACCEPT\n\n\\#保存上述规则\n\nservice iptables save\n\n1.  service iptables restart *\\#重启防火墙*\n\n2.  systemctl enable iptables.service *\\#设置开机自动启动*\n\n#### 6.如果还是连接不上就直接重启centos即可连接\n\n#### 7.总结\n\n参考：https://www.cnblogs.com/huizhipeng/p/10127333.html\n\n原因：防火墙对外端口没有开，以上iptables和firewalld均是防火墙软件\n\n一下使用centos自带firewall开放3306端口\n\n##### 1.关闭iptable开机启动\n\nsystemctl disable iptables.service\n\n![](./5e0be226696ad8641714021d4d214efb.png)\n\n##### 2.关闭iptable服务\n\nservice iptables stop\n\n##### 3.查看iptable服务状态\n\nsystemctl status iptables\n\n![](./58dc9fb9d27f2009f589b7a285cb1081.png)\n\n如果还是active ，选择reboot\n\n![](./f7fc4dd8fa60e47551a0ecf046fd9f06.png)\n\n##### 4.开启firewall\n\nsystemctl start firewalld.service\n\n![](./bc750fb1a92e198aade88c4f995683e3.png)\n\nsystemctl unmask firewalld\n\n![](./dd2e7e4c52cd5cf26377ec1e3fe1749c.png)\n\nsystemctl start firewalld.service\n\n\\#\\# zone -- 作用域\n\n\\#\\# add-port=80/tcp -- 添加端口，格式为：端口/通讯协议\n\n\\#\\# permanent -- 永久生效，没有此参数重启后失效\n\nfirewall-cmd --zone=public --add-port=3306/tcp --permanent\n\n\\#\\# 开启3306端口后，workbench或naivcat 就能连接到MySQL数据库了\n\n\\#\\#重启防火墙\n\nfirewall-cmd --reload\n\n##### 设置开机启动\n\nsystemctl enable firewalld\n\n### ubuntu16 设置静态ip\n\n参考：<https://www.jianshu.com/p/d69a95aa1ed7>\n\n文件/etc/network/interfaces\n\nauto enp7s0\n\niface enp7s0 inet static\n\naddress 10.0.208.222\n\nnetmask 255.255.240.0\n\ngateway 10.0.208.1\n\ndns-nameservers 218.2.135.1\n\n刷新ip\n\nsudo ip addr flush enp7s0\n\nsudo systemctl restart networking.service\n\n### Ubuntu16 修改时间\n\n参考：<https://blog.csdn.net/zhengchaooo/article/details/79500032>\n\n先查看当前系统时间\n\nroot@ubuntu:/\\# date -R\n\n结果时区是：-0500\n\n我需要的是东八区，这儿显示不是，所以需要设置一个时区\n\n1.运行tzselect\n\nroot@ubuntu:/\\# tzselect\n\n在这里我们选择亚洲 Asia，确认之后选择中国（China)，最后选择北京(Beijing)\n\n2.复制文件到/etc目录下\n\nroot@ubuntu:/\\# cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\n\n3.再次查看时间date -R，已经修改为北京时间\n\n改时间\n\n修改时间\n\nsudo date -s MM/DD/YY //修改日期\n\nsudo date -s hh:mm:ss //修改时间\n\n在修改时间以后，修改硬件CMOS的时间\n\nsudo hwclock --systohc //非常重要，如果没有这一步的话，后面时间还是不准\n\ntimedatectl set-timezone Asia/Shanghai\n\n### 使用mysqldump + crontab 定时对mysql数据库进行全量备份\n\n参考：<https://blog.csdn.net/weixin_34289454/article/details/92978348>\n\n<https://www.runoob.com/w3cnote/linux-crontab-tasks.html>\n\ncrontab [-u username] //省略用户表表示操作当前用户的crontab\n\n\\-e (编辑工作表)\n\n\\-l (列出工作表里的命令)\n\n\\-r (删除工作作)\n\n这两个文件输出路径要提前创建好\n\nlogpath='/data/mysqlbak/zhjlbackuplog'\n\ndatapath='/data/mysqlbak/zhjl'\n\n脚本：\n\n| \\#!/bin/bash \\#数据库IP dbserver='127.0.0.1' \\#数据库用户名 dbuser='root' \\#数据密码 dbpasswd='utone@727' \\#数据库,如有多个库用空格分开 dbname='zhjldb' \\#备份时间 backtime=\\`date +%Y%m%d\\` \\#备份输出日志路径 logpath='/data/mysqlbak/zhjlbackuplog' datapath='/data/mysqlbak/zhjl'   echo \"\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\# \\${backtime} \\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\"  echo \"开始备份\"  \\#日志记录头部 echo \"\" \\>\\> \\${logpath}/mysqlback.log echo \"-------------------------------------------------\" \\>\\> \\${logpath}/mysqlback.log echo \"备份时间为\\${backtime},备份数据库表 \\${dbname} 开始\" \\>\\> \\${logpath}/mysqlback.log \\#正式备份数据库 for table in \\$dbname; do source=\\`mysqldump -h \\${dbserver} -u \\${dbuser} -p\\${dbpasswd} \\${table} \\> \\${datapath}/\\${backtime}.sql\\` 2\\>\\> \\${logpath}/mysqlback.log; \\#备份成功以下操作 if [ \"\\$?\" == 0 ];then cd \\${datapath} \\#为节约硬盘空间，将数据库压缩 tar zcf \\${table}\\${backtime}.tar.gz \\${backtime}.sql \\> /dev/null \\#删除原始文件，只留压缩后文件 rm -f \\${datapath}/\\${backtime}.sql \\#删除七天前备份，也就是只保存7天内的备份 find \\${datapath} -name \"\\*.tar.gz\" -type f -mtime +7 -exec rm -rf {} \\\\; \\> /dev/null 2\\>&1 echo \"数据库表 \\${dbname} 备份成功!!\" \\>\\> \\${logpath}/mysqlback.log else \\#备份失败则进行以下操作 echo \"数据库表 \\${dbname} 备份失败!!\" \\>\\> \\${logpath}/mysqlback.log fi done echo \"完成备份\" echo \"\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\# \\${backtime} \\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\" |\n|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n\n为脚本添加执行权限\n\n\\#chmod +x /data/mysqlbak/mysqlbak.sh\n\n**配置定时任务执行脚本**\n\n\\#crontab -e\n\n00 02 \\* \\* \\* /data/mysqlbak/mysqlbak.sh\n\n### linux文件属主与属组\n\n![](./459676866fd8781a81dd7e07e6d5a5bb.png)\n\n从左至右第一个字符代表文件类型\n\n-   当为[ d ]则是目录\n\n-   当为[ - ]则是文件；\n\n-   若是[ l ]则表示为链接文档(link file)；\n\n-   若是[ b ]则表示为装置文件里面的可供储存的接口设备(可随机存取装置)；\n\n-   若是[ c\n    ]则表示为装置文件里面的串行端口设备，例如键盘、鼠标(一次性读取装置)。\n\n    ![](./9e9f2ef604e80ba8a9e8f4970f21e6cf.png)\n\n    chown [–R] 属主名 文件名  \n    chown [-R] 属主名：属组名 文件名\n\n### iptables删除已有规则\n\n-   iptables -nL --line-number  \n    显示每条规则链的编号\n\n-   iptables -D FORWARD 2\n\n### 使用ufw 开放端口、删除规则\n\n<https://cloud.tencent.com/developer/article/1326431>\n\n\\# 启用防火墙\n\nsudo ufw enable\n\n\\# 查看状态\n\nsudo ufw status\n\n\\# 添加规则\n\nsudo ufw allow 8080\n\n\\# 删除规则\n\nufw status numbered\n\nufw delete 【规则号】\n\nufw 允许指定ip 访问\n\n<https://cmd5.la/zixun/article_28.htm>\n\nufw allow from 192.168.131.0/24 to any port 80\n\n### 在文件末尾追加内容\n\n\\# 将“abc”写入到abc.txt,若没有abc.txt文件则会自动创建\n\necho abc \\> abc.txt\n\n\\# 将“ddddd”追加到abc.txt文本末尾\n\necho ddddd \\>\\> abc.txt\n\n### mysql command not found\n\nfind / -name mysql -print\n\n找到mysql命令的完整路径\n\n/data/mysql/bin/mysqladmin flush-hosts\n\nmysql\\#XW@2020\n\n### 将A（Linux）机器中的文件传输到B（Linux）机器中\n\n登录A\n\nsftp username@ip\n\n键入密码即可建立sftp连接\n\npwd 查看当前目录 为 /\n\n![](./d8661eb8514b1b1122c90056b26dffee.png)\n\n可见该文件夹不可写入\n\ncd /vmfs/volumes/Datastore131.5b\n\nput filename\n\n这步转换是为了验证上传的vmdk文件可以被exsi软件正常识别\n\nvmkfstools -i file1 file2\n\n![](./aa8317d41c81290f24f97b2a312c990c.png)\n\n### 在后台执行jar包\n\n<https://www.cnblogs.com/linnuo/p/9084125.html>\n\nnohup java -jar jarName.jar & //nohup表示不挂断，&表示在后台执行\n\nnohup java -jar jarName.jar \\>log.txt & // \\> 输出文件，如果文件不存在会创建\n\n### Docker\n\n<https://www.runoob.com/docker/docker-hello-world.html>\n\n#### 安装：\n\ncurl -fsSL https://get.docker.com \\| bash -s docker --mirror Aliyun\n\n#### 创建容器\n\ndocker run -itd -p 80:80 -p 8081:8081 -p 3336:3336 -p 8001:22 --name dev_common ubuntu:20.04 /bin/bash\n\n//创建容器，并进入，其中/bin/bash 为 交互式 shell， -p 宿主机端口:容器端口\n映射端口\n\ndocker ps -a\n\n//查看所有容器\n\n#### 进入容器\n\ndocker exec -it 243c32535da7 /bin/bash\n\n#### 镜像导入导出\n\ndocker export 容器id \\>文件名.tar\n\n//导出容器快照到本地\n\ndocker import dev_web.tar dev_web\n\n//将快照文件导入为本地镜像\n\ndocker run -itd -p 80:80 -p 8081:8081 -p 3336:3336 -p 8001:22 --name dev_web\n\\--privileged dev_web:latest /usr/sbin/init\n\n通过 -e LANG=\"C.UTF-8\" 设置 LANG 环境变量值为 C.UTF-8\n//启动镜像\n\n【注】 这里使用 –-privileged 不然创建的容器无法使用systemctl，生产环境不建议使用\n\ndocker run -itd -p 8888:8888 --name dev_dlv2 dev_web:latest /bin/bash\n\n### 建立软连接\n\nlinux 软链接的创建相当于windows的快捷方式\n\nln -s 【源地址】 【软链接地址】\n\nln -s ./testln2 testln1\n\n注意源地址 与 软链接地址后面均不要加 /\n\n删除软链接\n\nrm -rf /软链接地址\n\n注意这里后面也不要加 / ,ubuntu自动补全这个/ ，意味删除这个目录\n\n### ubuntu 更改用户密码\n\npasswd username\n\n### activity流程引擎在ubuntu环境上显示为乱码\n\n![](./ab9af614d881f77f97ca0369fd458cd5.png)\n\n原因：ubuntu 环境字体缺失\n\n解决方案：\n\n<https://blog.csdn.net/wangxintong_1992/article/details/81194896>\n\n安装工具查看已安装字体\n\nyum install -y fontconfig mkfontscale\n\napt-get -y install fontconfig xfonts-utils\n\n安装字体，将windows中常用字体全部拷贝至此文件夹\n\n![](./6784a6920b269f267a8886bf25097d62.png)\n\n/usr/share/fonts/\n\n然后建立字体索引信息，更新字体缓存，使用如下命令：\n\ncd /usr/share/fonts/\n\nmkfontscale\n\nmkfontdir\n\nfc-cache\n\n查看是否安装成功\n\nfc-list :lang=zh\n\n## 安装secureCRT8.7（连接工具）\n\n### secureCRT下载\n\n<https://www.vandyke.com/cgi-bin/releases.php?product=securecrt>\n\n### 注册机破解\n\n### secureCRT设置\n\noptionsession optionterminalemulationmaped keys\n\n![](./b5ef573fc0bc15803438e58120fc7701.png)\n\noptionsession optionterminalemulationmaped keys\n\n![](./72a0f35573e090804d6bf420a9b27096.png)\n\n复制操作（保留原设置、更改ip）\n\n![](./16e00e38c0c5f2e9266f0ed0d3a042b9.png)\n\n更改1\n\n![](./87650aade49e5e0c961e8df8981634fd.png)\n\n更改2\n\n右键propertiesSSH2 更改ip\n\n补充：SSH(secure shell) 安全外壳协议，常用于远程操作\n\n## Linux启动过程\n\n参考：https://www.runoob.com/linux/linux-system-boot.html\n\n内核引导—运行init—系统初始化—建立终端—用户登录\n\n![](./4e40e8aff000cee7f5ae9e61a1d2b95d.jpeg)\n\n## Linux系统目录结构\n\n参考：https://www.runoob.com/linux/linux-system-contents.html\n\n![](./78707265aa0507ab97c187a762e2db2b.png)\n\n![](./cf76ed5ddb58d9a1982914419bb512be.png)\n\n-   **/bin**：  \n    bin 是 Binaries (二进制文件) 的缩写, 这个目录存放着最经常使用的命令。\n\n-   **/boot：**  \n    这里存放的是启动 Linux 时使用的一些核心文件，包括一些连接文件以及镜像文件。\n\n-   **/dev ：**  \n    dev 是 Device(设备) 的缩写, 该目录下存放的是 Linux 的外部设备，在 Linux\n    中访问设备的方式和访问文件的方式是相同的。\n\n-   **/etc：**  \n    etc 是 Etcetera(等等)\n    的缩写,这个目录用来存放所有的系统管理所需要的配置文件和子目录。\n\n-   **/home**：  \n    用户的主目录，在 Linux\n    中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的，如上图中的\n    alice、bob 和 eve。\n\n-   **/lib**：  \n    lib 是 Library(库)\n    的缩写这个目录里存放着系统最基本的动态连接共享库，其作用类似于 Windows 里的\n    DLL 文件。几乎所有的应用程序都需要用到这些共享库。\n\n-   **/lost+found**：  \n    这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。\n\n-   **/.**：  \n    linux 系统会自动识别一些设备，例如U盘、光驱等等，当识别后，Linux\n    会把识别的设备挂载到这个目录下。\n\n-   **/mnt**：  \n    系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在 /mnt/\n    上，然后进入该目录就可以查看光驱里的内容了。\n\n-   **/opt**：  \n    opt 是 optional(可选)\n    的缩写，这是给主机额外安装软件所摆放的目录。比如你安装一个ORACLE数据库则就可以放到这个目录下。默认是空的。\n\n-   **/proc**：  \n    proc 是 Processes(进程) 的缩写，/proc\n    是一种伪文件系统（也即虚拟文件系统），存储的是当前内核运行状态的一系列特殊文件，这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。\n    \n    这个目录的内容不在硬盘上而是在内存里，我们也可以直接修改里面的某些文件，比如可以通过下面的命令来屏蔽主机的ping命令，使别人无法ping你的机器：\n\n-   **/usr**：  \n    usr 是 unix shared resources(共享资源)\n    的缩写，这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于\n    windows 下的 program files 目录。\n\n-   **/usr/bin：**  \n    系统用户使用的应用程序。\n\n-   **/usr/sbin：**  \n    超级用户使用的比较高级的管理程序和系统守护程序。\n\n-   **/usr/src：**  \n    内核源代码默认的放置目录。\n\n## Linux网络模式\n\n参考：https://blog.csdn.net/lcr_happy/article/details/59482955\n\n### 1、bridged(桥接模式)直接连接物理网络\n\n该模式下，VMWare虚拟出来的[操作系统](http://lib.csdn.net/base/operatingsystem)就像是局域网中的一台独立的主机，它可以访问网内任何一台机器。在桥接模式下，你需要手工为虚拟\n系统配置IP地址、子网掩码，而且还要和宿主机器处于同一网段，这样虚拟系统才能和宿主机器进行通信。同时，由于这个虚拟系统是局域网中的一个独立的主机\n系统，那么就可以手工配置它的TCP/IP配置信息，以实现通过局域网的网关或路由器访问互联网。\n\n使用桥接模式的虚拟系统和宿主机器的关系，就像连接在同一个Hub上的两台电脑。想让它们相互通讯，你就需要为虚拟系统配置IP地址和子网掩码，否则就无法通信。\n\n如果你想利用VMWare在局域网内新建一个虚拟服务器，为局域网用户提供网络服务，就应该选择桥接模式。\n\n### 2、host-only(主机模式)与主机共享专用网络\n\n在某些特殊的网络调试环境中，要求将真实环境和虚拟环境隔离开，这时你就可采用host-only模式。在host-only模式中，所有的虚拟系统是可以相互通信的，但虚拟系统和真实的网络是被隔离开的。\n\n提示:在host-only模式下，虚拟系统和宿主机器系统是可以相互通信的，相当于这两台机器通过双绞线互连。\n\n在host-only模式下，虚拟系统的TCP/IP配置信息(如IP地址、网关地址、DNS服务器等)，都是由VMnet1(host-only)虚拟网络的DHCP服务器来动态分配的。\n\n如果你想利用VMWare创建一个与网内其他机器相隔离的虚拟系统，进行某些特殊的网络调试工作，可以选择host-only模式。\n\n### 3、NAT(网络地址转换模式)共享主机ip\n\n在NAT网络中，会使用到VMnet8虚拟交换机，Host上的VMware Network Adapter\nVMnet8虚拟网卡被连接到VMnet8交换机上，来与Guest进行通信，但是VMware Network\nAdapter\nVMnet8虚拟网卡仅仅是用于和VMnet8网段通信用的，它并不为VMnet8网段提供路由功能，处于虚拟NAT网络下的Guest是使用虚拟的NAT服务器连接的Internet的。\n\n这时候，你的Guest和Host就可以实现互访了，并且如果你的Host此时已经连接到了Internet，那么你的Guest也就可以连上Internet了。那么VMware\nNetwork Adapter\nVMnet8虚拟网卡在这里扮演了一个什么角色呢？它仅仅是为Host和NAT虚拟网络下的Guest通信提供一个接口，所以，即便Disable掉这块虚拟网卡，Guest仍然是可以上网的，只是Host无法再访问VMnet8网段而已。\n\n这种方式的时候，主机需要开启vmdhcp和vmnat服务。\n\n使用NAT模式，就是让虚拟系统借助NAT(网络地址转换)功能，通过宿主机器所在的网络来访问公网。也就是说，使用NAT模式可以实现在虚拟\n系统里访问互联网。NAT模式下的虚拟系统的TCP/IP配置信息是由VMnet8(NAT)虚拟网络的DHCP服务器提供的，无法进行手工修改，因此虚\n拟系统也就无法和本局域网中的其他真实主机进行通讯。采用NAT模式最大的优势是虚拟系统接入互联网非常简单，你不需要进行任何其他的配置，只需要宿主机\n器能访问互联网即可。\n\n如果你想利用VMWare安装一个新的虚拟系统，在虚拟系统中不用进行任何手工配置就能直接访问互联网，建议你采用NAT模式。\n\n提示:以上所提到的NAT模式下的VMnet8虚拟网络，host-only模式下的VMnet1虚拟网络，以及bridged模式下的\nVMnet0虚拟网络，都是由VMWare虚拟机自动配置而生成的，不需要用户自行设置。VMnet8和VMnet1提供DHCP服务，VMnet0虚拟\n网络则不提供\n\n### 二、三种模式的本质区别\n\n网络模式\n\n我们首先说一下VMware的几个虚拟设备\n\nVMnet0：用于虚拟桥接网络下的虚拟交换机\n\nVMnet1：用于虚拟[Host](http://whatis.ctocio.com.cn/searchwhatis/128/5948128.shtml)-Only网络下的虚拟交换机\n\nVMnet8：用于虚拟NAT网络下的虚拟交换机\n\nVMware [Network](http://whatis.ctocio.com.cn/searchwhatis/367/6093367.shtml)\nAdepter VMnet1：Host用于与Host-Only虚拟网络进行通信的虚拟网卡\n\nVMware Network Adepter VMnet8：Host用于与NAT虚拟网络进行通信的虚拟网卡\n\n安装了VMware虚拟机后，会在网络连接对话框中多出两个虚拟网卡。\n\n1）桥接网络模式\n\n桥接网络是指本地物理网卡和虚拟网卡通过VMnet0虚拟交换机进行桥接，物理网卡和虚拟网卡在拓扑图上处于同等地位(虚拟网卡既不是Adepter\nVMnet1也不是Adepter VMnet8)。\n\n这里的VMnet0相当于一个交换机，最终通过这个虚拟交换机使其两端在一个网段中。\n\n![](./b3114e6a55463af918ea7a8ffeeba1cd.png)\n\n那么物理网卡和虚拟网卡就相当于处于同一个网段，虚拟交换机就相当于一台现实网络中的交换机。所以两个网卡的IP地址也要设置为同一网段。\n\n如果使虚拟机使用桥接模式连接网络，在运行cmd命令后产看两个IP，可以发现IPv4的IP\n和虚拟机处于一个网段。\n\n物理网卡和虚拟网卡的IP地址处于同一个网段，子网掩码、网关、DNS等参数都相同。两个网卡在拓扑结构中是相对独立的。\n\n桥接网络模式是VMware虚拟机中最简单直接的模式。安装虚拟机时它为默认选项。\n\n在桥接模式下，虚拟机和宿主计算机处于同等地位，虚拟机就像是一台真实主机一样存在于局域网中。因此在桥接模式下，我们就要像对待其他真实计算机一样为其配置IP、网关、子网掩码等等。\n\n当我们可以自由分配局域网IP时，使用桥接模式就可以虚拟出一台真实存在的主机。\n\n2）NAT模式\n\n在NAT网络中，会用到VMware\n[Network](http://whatis.ctocio.com.cn/searchwhatis/367/6093367.shtml) Adepter\nVMnet8虚拟网卡，主机上的VMware Network Adepter\nVMnet8虚拟网卡被直接连接到VMnet8虚拟交换机上与虚拟网卡进行通信。\n\nVMware Network Adepter\nVMnet8虚拟网卡的作用仅限于和VMnet8网段进行通信，它不给VMnet8网段提供路由功能，所以虚拟机虚拟一个NAT服务器，使虚拟网卡可以连接到Internet。在这种情况下，我们就可以使用端口映射功能，让访问主机[80](http://whatis.ctocio.com.cn/searchwhatis/293/5949293.shtml)端口的请求映射到虚拟机的80端口上。\n\nVMware Network Adepter\nVMnet8虚拟网卡的IP地址是在安装VMware时由系统指定生成的，我们不要修改这个数值，否则会使主机和虚拟机无法通信。\n\n![](./75c61d473eae7f4873ca8268f6a6b8d6.png)\n\n虚拟出来的网段和NAT模式虚拟网卡的网段是一样的，都为192.168.111.X，包括NAT服务器的IP地址也是这个网段。在安装VMware之后同样会生成一个虚拟DHCP服务器，为NAT服务器分配IP地址。\n\n当主机和虚拟机进行通信的时候就会调用VMware Network Adepter\nVMnet8虚拟网卡，因为他们都在一个网段，所以通信就不成问题了。\n\n实际上，VMware Network Adepter\nVMnet8虚拟网卡的作用就是为主机和虚拟机的通信提供一个接口，即使主机的物理网卡被关闭，虚拟机仍然可以连接到Internet，但是主机和虚拟机之间就不能互访了。\n\n在NAT模式下，宿主计算机相当于一台开启了DHCP功能的\n[路由器](http://www.2cto.com/net/router/)，而虚拟机则是内网中的一台真实主机，通过路由器(宿主计算机)DHCP动态获得网络参数。因此在NAT模式下，虚拟机可以访问外部网络，反之则不行，因为虚拟机属于内网。\n\n使用NAT模式的方便之处在于，我们不需要做任何网络设置，只要宿主计算机可以连接到外部网络，虚拟机也可以。\n\nNAT模式通常也是大学校园网Vmware最普遍采用的连接模式，因为我们一般只能拥有一个外部IP。很显然，在这种情况下，非常适合使用NAT模式。\n\n3)host-only模式\n\n在Host-Only模式下，虚拟网络是一个全封闭的网络，它唯一能够访问的就是主机。其实Host-Only网络和NAT网络很相似，不同的地方就是\nHost-Only网络没有NAT服务，所以虚拟网络不能连接到Internet。主机和虚拟机之间的通信是通过VMware\n[Network](http://whatis.ctocio.com.cn/searchwhatis/367/6093367.shtml) Adepter\nVMnet1虚拟网卡来实现的。\n\n![](./9bb6ab0146504418ad4a91bb86f57403.png)\n\n同NAT一样，VMware Network Adepter\nVMnet1虚拟网卡的IP地址也是VMware系统指定的，同时生成的虚拟DHCP服务器和虚拟网卡的IP地址位于同一网段，但和物理网卡的IP地址不在同一网段。\n\nHost-Only的宗旨就是建立一个与外界隔绝的内部网络，来提高内网的安全性。这个功能或许对普通用户来说没有多大意义，但大型服务商会常常利用这个功能。如果你想为VMnet1网段提供路由功能，那就需要使用RRAS，而不能使用XP或2000的ICS，因为ICS会把内网的IP地址改为\n192.168.0.1，但虚拟机是不会给VMnet1虚拟网卡分配这个地址的，那么主机和虚拟机之间就不能通信了。\n\n在Host-only模式下，相当于虚拟机通过双绞线和宿主计算机直连，而宿主计算机不提供任何路由服务。因此在Host-only模式下，虚拟机可以和宿主计算机互相访问，但是虚拟机无法访问外部网络。\n\n当我们要组成一个与物理网络相隔离的虚拟网络时，无疑非常适合使用Host-only模式。\n\n### 设置centos7 固定ip\n\n参考：https://blog.csdn.net/johnnycode/article/details/40624403?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control&dist_request_id=&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control\n\n原始\n\ncat /etc/sysconfig/network-scripts/ifcfg-ens33\n\n| TYPE=Ethernet PROXY_METHOD=none BROWSER_ONLY=no BOOTPROTO=dhcp DEFROUTE=yes IPV4_FAILURE_FATAL=no IPV6INIT=yes IPV6_AUTOCONF=yes IPV6_DEFROUTE=yes IPV6_FAILURE_FATAL=no IPV6_ADDR_GEN_MODE=stable-privacy NAME=ens33 UUID=578a57b6-4eba-4aad-abe0-fd2aac94f895 DEVICE=ens33 ONBOOT=yes |\n|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n\n修改如下内容\n\nBOOTPROTO=\"static\" \\#dhcp改为static\n\nONBOOT=\"yes\" \\#开机启用本配置\n\nIPADDR=192.168.7.106 \\#静态IP\n\nGATEWAY=192.168.7.1 \\#默认网关\n\nNETMASK=255.255.255.0 \\#子网掩码\n\nDNS1=192.168.7.1 \\#DNS 配置\n\n重启网络服务\n\nservice network restart\n\n## 基本操作\n\n### -用户登录\n\n\\--root\n\n接近完整的系统控制\n\n\\--普通用户\n\n权限有限\n\n\\--如何区分root&normal\n\n\\#--root \\$--normal\n\n【CLI】id -u\n\n0--root not 0—normal\n\n### -terminal\n\n### -交互式接口（启动终端后，在终端设备附加的一个交互式应用程序）\n\nGUI（Graphic User Interface）\n\nCLI（Command Line Interface）\n\n\\--基于shell程序\n\nEg.bash(bourn again shell)\n\n### -shell扩展（shell提供用户与内核交互的接口）\n\n![](./b432c48e6e40c0c2d38ad8113f82da8d.png)\n\ncat /etc/shells--查看所有shell\n\necho \\$SHELL--查看当前shell\n\n不同shell 语法略有不同\n\n/bin/[shell名称]--切换不同shell\n\n### 目录\n\n[root@centos7 \\~]\\#--其中\\~就代表当前用户目录即/root\n\necho \\$PS1--显示提示符格式(严格区分大小写)\n\nPS1=\"\\\\[\\\\e[1;35m\\\\][\\\\u@\\\\h \\\\W]\\\\\\\\\\$\\\\[\\\\e[0m\\\\]\"--修改显示行格式命令\n\nlinux中保存必须写到文件内\n\n\\-利用nano软件\n\nnano /etc/profile.d/[文件名].s--新建文件\n\nbuiltin（内部命令）--依赖于shell，优先级高\n\n外部命令--表现为磁盘文件\n\ntype [命令名]--查看是内部命令还是外部命令\n\n![](./28507b06b44130977e81bb4ab082318f.png)\n\n缓存cache--将磁盘中已经被执行的命令放到内存中，下次使用该数据，直接从内存中读取\n\n### 命令行执行优先级\n\nalias（在于内部命令重名的情况） --- 内部命令 -- hash表（执行外部命令的路径）\n\\--\\$PATH （path变量找路径）-–命令找不到\n\n### 命令格式\n\nwhereis [命令名称] -- 查看[命令名称]路径\n\n命令格式\n\ncommand [options] [arguments]\n\nid -u -tiger 格式 命令【短格式选项】【参数】\n\nls --all 格式 命令 【长格式选项】\n\n### 简单命令\n\n![](./ce2a1ec7190d4483d23d15a237923a9a.png)\n\n![](./174b6db62bd8e11c35f95226905715a0.png)\n\nScreen是一个可以在多个进程之间多路复用一个物理终端的全屏窗口管理器。Screen中有会话的概念，用户可以在一个screen会话中创建多个screen窗口，在每一个screen窗口中就像操作一个真实的telnet/SSH连接窗口那样。\n\nscreen -S 【会话名称】 创建screen会话\n\nscreen -x 【会话名称】 加入screen会话\n\n![](./bb2d50afef33352c3ece25021387a332.png)\n\n![](./de24b0eb656a84ddd3b6b66ba8bdea4a.png)\n\necho -n hello\n\n![](./351345f70df981fa61022f8d4850ca13.png)\n\necho -n “hello” 加引号，开启解释功能\n\n![](./0d04103d63ae48de04dfc622b080c48e.png)\n\necho -e \"\\\\a\" 发出警告声\n\nsleep 5；echo -e \"\\\\a\" 加分号；在执行某个操作之后，发出警告声\n\n![](./5cbfe914e22e42ba62383c12438a9d8c.png)\n\n![](./42d702ed75a349d074f7a715579abcab.png)\n\n![](./6aa4e32a56d2bf03d2658dd7324b816f.png)\n\n![](./80173470ac23bd513e771ee4fb7a609d.png)\n\n### 获取帮助\n\n![](./743f32baab6ec3bff7d5a108d8df80af.png)\n\nwhatis [命令名称] 简要说明该命令的功能\n\n![](./7d5dbe97b0d291f490760d6d34768cc1.png)\n\nhelp [内部命令] 用来查看内部命令的帮助\n\n![](./2f43fde9fb20b10e0673b420d87b64f8.png)\n\nman [外部命令] 查看外部命令帮助\n\n![](./e9cb1491ea31ca167ab66e28503c03bc.png)\n\n![](./4d16fdc238814f00d9c5eee2c7bd952c.png)\n\n#### 网站\n\n![](./a7d6bfa70aa8282df7aaf9e88c3014f1.png)\n\n### Linux之绝对和相对路径\n\n![](./d899304052783e84bc81d6ce0146c1ce.png)\n\n## 安装开发环境Jdk1.8的安装\n\n参考：https://www.cnblogs.com/sxdcgaq8080/p/7492426.html\n\n#### 卸载系统自带java相关文件（使用root账户操作）\n\njava -version 查看当前java版本\n\n![](./0262779b1c7d458782e44214b34448d4.png)\n\nrpm -qa \\|grep java 查看包含java字符串的文件\n\n![](./0e0464882f570aedd7c0a13f55b84a04.png)\n\n删除（.noarch 文件不用删除）\n\nrpm -e --nodeps java-1.8.0-openjdk-1.8.0.262.b10-1.el7.x86_64\n\nrpm -e --nodeps java-1.8.0-openjdk-headless-1.8.0.262.b10-1.el7.x86_64\n\n![](./a39654475fb7969f364e6454c3a04875.png)\n\n#### dowload jdk1.8\n\n<https://www.oracle.com/cn/java/technologies/javase/javase-jdk8-downloads.html>\n\n![](./eff61bd59ed5a8ba9adb5b6d0595bbb9.png)\n\n#### 上传jdk文件\n\ncd / 切换至 / 目录下\n\nmkdir devkits 创建devkits目录\n\ncd /devkits\n\nmkdir jdk\n\nrz 上传jdk\n\n![](./70fe4c8c0680b23c9a89cc0c7b355c2b.png)\n\n#### 解压jdk\n\ncd [jdk存放目录]\n\ntar -zxvf jdk-8u271-linux-x64.tar.gz 解压jdk\n\n![](./0d75564787bfdf46979b73227797f9d4.png)\n\n#### 删除jdk安装包\n\nrm -f jdk-8u271-linux-x64.tar.gz\n\n![](./291bd43f9554a21ef11e0c6b72622277.png)\n\n#### **配置JDK环境变量**\n\n①编辑全局变量\n\n在命令行键入：\n\nvim /etc/profile\n\n命令说明：\n\nvim 文本编辑\n\n/etc/profile 全局变量文件\n\n![](./060343612dd3124f535c975b32e3bec8.png)\n\n进入文本编辑状态下，光标走到文件最后一行，键盘按下：\n\ni\n\n进入插入状态：\n\n在文本的最后一行粘贴如下：\n\n注意JAVA_HOME=/usr/java/jdk1.8.0_144 就是你自己的目录\n\n\\#java environment  \nexport JAVA_HOME=/usr/java/jdk1.8.0_144  \nexport\nCLASSPATH=.:\\${JAVA_HOME}/jre/lib/rt.jar:\\${JAVA_HOME}/lib/dt.jar:\\${JAVA_HOME}/lib/tools.jar\n\nexport PATH=\\$PATH:\\${JAVA_HOME}/bin\n\n【注】：CentOS6上面的是JAVAHOME，CentOS7是{JAVA_HOME}\n\n![](./2a09202ee471315d248d73695d634aeb.png)\n\n键盘：\n\nESC\n\nshift+q\n\n![](./63e0bbabbb773372bf38e32b14b8bdb5.png)\n\n键盘：\n\nqw!\n\n写入并强制退出。\n\n如果不管用可以键盘：\n\nx\n\n一个意思，都是保存并退出的意思。\n\n\\-------------------------------------------------------------------------第五步---------------------------------------------------------------------------\n\n#### **让刚刚设置的环境变量生效并检查是否安装成功**\n\n①让刚刚设置的环境变量生效\n\n键入：\n\nsource /etc/profile\n\nsource /etc/profile或 . /etc/profile\n\n![](./84e15b764e43b3ed3c6ff6305e2a94d1.png)\n\n②检查是否配置成功\n\n键入：\n\njava -version\n\n![](./28ff4094d2e463f3edbe990afbc42472.png)\n\n================================================完成======================================================\n\n终于完成了，步骤很简单，但是对于入门命令都不晓得的，可以参考：\n\n<http://www.cnblogs.com/sxdcgaq8080/p/7470796.html>\n\n### tomcat8.5的安装\n\n参考：<https://cloud.tencent.com/developer/article/1333879>\n\n#### 下载tomcat\n\n<https://tomcat.apache.org/download-80.cgi>\n\n![](./ca0448fa660dcd8e7072ed17943d001b.png)\n\n#### 上传、解压、删除tomcat安装包\n\n![](./1e85393527a182fd7d27faba5417e02e.png)\n\n#### 指定jdk\n\n以上jdk1.8的安装用的是全局配置\n\n#### 开放端口\n\n\\#开放8080端口&&重新加载防火墙规则\n\nfirewall-cmd --add-port=8080/tcp --permanent && firewall-cmd --reload\n\n#### 设置开机启动\n\n##### \\#创建Tomcat8服务文件\n\nvim /usr/lib/systemd/system/tomcat8.service\n\n\\#tomcat8.service文件内容：\n\n[Unit]\n\nDescription=Tomcat8\n\nAfter=syslog.target network.target remote-fs.target nss-lookup.target\n\n[Service]\n\nType=forking\n\nExecStart=/devkits/tomcat/apache-tomcat-8.5.61/bin/startup.sh\n\nExecReload=/devkits/tomcat/apache-tomcat-8.5.61/bin/startup.sh\n\nExecStop=/devkits/tomcat/apache-tomcat-8.5.61/bin/shutdown.sh\n\n[Install]\n\nWantedBy=multi-user.target\n\n##### 在catalina.sh中为Tomcat添加启动参数\n\n在/devkits/tomcat/apache-tomcat-8.5.61/bin/catalina.sh文件开头添加JAVA_HOME和JRE_HOME，其中jdk1.8.0_27为jdk的安装目录\n\nexport JAVA_HOME=/devkits/jdk/jdk1.8.0_271\n\nexport JRE_HOME=/devkits/jdk/jdk1.8.0_271/jre\n\n##### 配置开机启动\n\n\\#设置Tomcat8开机启动\n\nsystemctl enable tomcat8\n\nreboot 重启\n\nsystemctl status apache-tomcat-8.5.61.service 查看启动状态\n\n#### 设置开机启动失败原因\n\n##### 原因一：\n\n命令行\n\nsystemctl status apache-tomcat-8.5.61.service 查看启动状态\n\n![](./bac6b56851e831bb8543a0d2f07d3fdc.png)\n\n![](./ed2da94d46707ceea8c621139ae1056f.png)\n\n##### 原因二：\n\n![](./22b733efc4832b15b4ac5ea688261a60.png)\n\njdk安装目录：/devkits/jdk/jdk1.8.0_271/\n\n需要在catalina.sh中添加JAVA_HOME & JRE_HOME\n\n### Centos7 安装maven\n\nhttps://blog.csdn.net/xiaolinlangzi/article/details/83056698\n\n### Ubuntu16 tomcat 卸载与安装\n\n卸载：\n\n1.  关闭tomcat服务\n\n2.  找到tomcat 安装目录 删除 rm -rf /usr/java/tomcat/apache-tomcat-8.5.31\n\n3.  卸载至指定目录\n\n4.  配置环境变量 apache-tomcat-9.0.43\n\n### Ubuntu16 Nginx 离线安装\n\n参考：<https://blog.csdn.net/yh0503/article/details/88681145>\n\n![](./bfeade53efb89844cde645ee1a6f0e4f.png)\n\n常用命令（前提有条件是要进入到nginx目录中去）：\n\ncd /devkits/nginx/nginx-1.18.0/sbin/\n\n启动\n\n./nginx\n\n关闭\n\n./nginx -s stop\n\n重新加载\n\n./nginx -s reload\n\n### ubuntu 16.04彻底卸载nginx\n\n参考：https://blog.csdn.net/weixin_42424269/article/details/88988249\n\n### Mysql5.7（Ubuntu16.04）的离线安装\n\n\\+开放3306端口 设置访问权限\n\nhttps://blog.csdn.net/freezingxu/article/details/77088506\n\n密码：utone@727\n\n参考：<https://www.cnblogs.com/itzlg/p/10975842.html>（离线安装）\n\n<https://www.cnblogs.com/EasonJim/p/7147787.html>（三种方式安装）\n\nmirrors.aliyun.com\n\n环境：ubantu16\n\n\\#服务管理\n\n\\#启动\n\nsudo service mysql start\n\n\\#停止\n\nsudo service mysql stop\n\n\\#服务状态\n\nsudo service mysql status\n\n![复制代码](./51e409b11aa51c150090697429a953ed.gif)\n\n\\#连接数据库\n\nmysql -h 127.0.0.1 -P 3306 -uroot -putone@727\n\n\\#-h为远程IP，-P为端口号，-u为用户名，-p为密码\n\n\\#测试SQL\n\nshow databases;\n\n#### Download\n\n<https://dev.mysql.com/downloads/mysql/>\n\n![](./11ab86be28be079089bc0f6e1d6cad8a.png)\n\n#### 解压、按顺序安装\n\ntar -xf\nmysql-server_5.7.22-1ubuntu16.04_amd64.deb-bundle.tar命令解压，得到如下安装包：\n\n\\#libaio 如果系统中尚未存在库，则 可能需要安装该库：\n\nsudo apt-get install libaio1\n\n\\#使用以下命令预配置MySQL服务器软件包：\n\nsudo dpkg-preconfigure mysql-community-server_\\*.deb\n\n\\#提示：将被要求为root用户提供您的MySQL安装密码。\n\n\\#对于MySQL服务器的基本安装，请安装数据库公用文件包，客户端包，客户端元包，服务器包和服务器元包（按此顺序）;\n可以使用单个命令来执行此操作：\n\n\\#注意：下面这条命令不能直接运行，应该拆开来按中括号里面以逗号分开的顺序进行安装，比如：\n\n\\#sudo dpkg -i\nmysql-{common,community-client,client,community-server,server}_\\*.deb\n\nsudo dpkg -i mysql-common_\\*.deb\n\nsudo dpkg -i mysql-community-client_\\*.deb\n\nsudo dpkg -i mysql-client_\\*.deb\n\nsudo dpkg -i mysql-community-server_\\*.deb\n\nsudo dpkg -i mysql-server_\\*.deb\n\n\\#如果中途被dpkg警告未满足的依赖关系\n，可以使用apt-get来修复它们，然后再运行中断的命令 ：\n\nsudo apt-get -f install\n\n#### 缺少依赖\n\n##### Package libmecab2 is not installed.\n\n<https://developer.aliyun.com/packageSearch?word=libmecab2>\n\n【description】\n\ndpkg: dependency problems prevent configuration of mysql-community-server:\n\nmysql-community-server depends on libmecab2 (\\>= 0.996-1.2ubuntu1); however\n\n![](./e7c59b3e1041f0306879db8475e74823.png)\n\n##### 2. libaio1\n\n<https://developer.aliyun.com/packageSearch?word=libmecab2>\n\n![](./a69005585797766dbac332f56b8660a1.png)\n\n### ubuntu下 mysql对表名区分大小写的解决办法\n\nshow variables like 'lower%'\n\n/etc/mysql/mysql.conf.d/mysqld.cnf 中添加了一个选项\n\nlower_case_table_names = 1\n\n然后通过sudo /etc/init.d/mysql restart 重启mysql后 问题解决\n\n### [Err] 1055 - Expression \\#35 GROUP BY mysql 5.7.33\n\n【报错信息】\n\n![](./1fcd1ee77a7a0b549773135dd1bf1347.png)\n\nThis is incompatible sql_mode = only_full_group_by\n\n【分析】\n\nonly_full_group_by默认开启， 要求target list 中的列必须来自聚合函数或者group\nlist ,避免这种情况可以使用**any_value(字段名)**\n\n**【实验】**\n\n| SELECT  a.template_classify AS 'templateClassify',  count(1) AS 'count',  d.label AS 'templateClassifyName' FROM  erp_tender_template a LEFT JOIN sys_dict d ON d. VALUE  = a.template_classify AND d.type = 'erp_template_classify' WHERE  a.del_flag = 0 GROUP BY  a.template_classify;  SELECT  a.template_classify AS 'templateClassify',  count(1) AS 'count',  any_value(d.label) AS 'templateClassifyName' FROM  erp_tender_template a LEFT JOIN sys_dict d ON d. VALUE  = a.template_classify AND d.type = 'erp_template_classify' WHERE  a.del_flag = 0 GROUP BY  a.template_classify |\n||\n\n【解决方案】\n\n/etc/mysql/mysql.conf.d/mysqld.cnf 中添加了一个选项\n\n[mysqld]\n\nsql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION\n\n### MySQL创建新用户并开启远程连接访问详解\n\n<https://www.php.cn/mysql-tutorials-441891.html>\n\nCREATE USER 'zhjl'@'%' IDENTIFIED BY 'zhjl@727';\n\nGRANT ALL ON jalprodatabase.\\* TO 'zhjl'@'%';\n\n### Mysql创建数据库并分到某个用户下\n\nCREATE DATABASE IF NOT EXISTS zhjldb default charset utf8 COLLATE\nutf8_general_ci;\n\nGRANT ALL ON zhjldb.\\* TO 'zhjl'@'%'\n\n### Ubuntu16 [dpkg卸载deb包](https://www.cnblogs.com/yoyotl/p/8195744.html)\n\n查看安装情况\n\ndpkg --list\\|grep mysql\n\n卸载\n\ndpkg -P mysql-server\n\ndpkg -P mysql-community-server\n\n\\-P：删除软件包的同时删除其配置文件；\n\n### CentOS7使用yum安装mysql8\n\n参考：<https://www.cnblogs.com/yichenscc/articles/10663844.html>\n\n### CentOS7离线安装mysql8\n\nroot密码：123456\n\n参考：<https://www.cnblogs.com/quchunhui/p/11115339.html>\n\n### Ubuntuoffx16离线安装mysql5.7\n\n参考：https://blog.csdn.net/candcplusplus/article/details/52156324\n\nwuhall密码：123456\n\n### CentOS7下 apache jmeter安装\n\n运行图形界面\n\n[root@centos7 bin]\\#cd /devkits/jmeter/apache-jmeter-5.4/bin\n\n[root@centos7 bin]\\#jmeter.sh\n\n参考：<https://blog.csdn.net/qq_19427739/article/details/104339159>\n","tags":["linux docker"]},{"title":"Hello World","url":"/2021/07/01/hello-world/","content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n```\nhexo clean\nhexo g\nhexo d\n```\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n"}]